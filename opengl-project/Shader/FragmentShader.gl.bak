#version 330 core
out vec4 FragColor;

struct Material{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	vec3 emissive;
	float shininess;

	sampler2D texture_diffuse1;
	sampler2D texture_specular1;
	
	int text;
};

struct PointLight
{
	vec3 position;

	float constant;
	float linear;
	float quadratic;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

#define NR_POINT_LIGHTS 20

in vec2 TexCoords;
in vec3 Normal;
in vec3 FragPos;

uniform Material material;
uniform PointLight pointLights[NR_POINT_LIGHTS];
uniform vec3 viewPos;
uniform float num;

vec3 CalcPointLight(PointLight light,vec3 normal,vec3 fragPos,vec3 viewDir);

void main()
{   
	vec3 norm = normalize(Normal);
	vec3 viewDir = normalize(viewPos-FragPos);
	vec3 result = vec3(0.0f,0.0f,0.0f);

	//for(int i=0;i<num;i++)
	//{
	//	result += CalcPointLight(pointLights[i],norm,FragPos,viewDir);
	//}
	result += CalcPointLight(pointLights[0],norm,FragPos,viewDir);
    	FragColor = vec4(result,1.0f);
    
}

vec3 CalcPointLight(PointLight light,vec3 normal, vec3 fragPos, vec3 viewDir)
{
	vec3 lightDir = normalize(light.position-fragPos);

	float diff = max(dot(lightDir,normal),0.0f);

	vec3 reflectDir = reflect(-lightDir,normal);
	float spec = pow(max(dot(viewDir,reflectDir),0.0f),material.shininess);

	float distance = length(light.position-fragPos);
	float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance)); 
	
	//attenuation *= 0.1;
	
	if(material.text==1)
	{
		vec3 ambient = light.ambient * vec3(texture(material.texture_diffuse1, TexCoords));
		vec3 diffuse = light.diffuse * diff * vec3(texture(material.texture_diffuse1, TexCoords));
		vec3 specular = light.specular * spec * vec3(texture(material.texture_specular1, TexCoords));

		ambient *= attenuation;
    		diffuse *= attenuation;
    		specular *= attenuation;

		return (ambient + diffuse /*+ specular*/);
	}
	else
	{
		vec3 ambient = light.ambient * material.diffuse;
		vec3 diffuse = light.diffuse * diff * material.diffuse;
		vec3 specular = light.specular * spec * material.diffuse;

		ambient *= attenuation;
    		diffuse *= attenuation;
    		specular *= attenuation;

		return (ambient + diffuse /*+ specular*/);
	}

	
}
