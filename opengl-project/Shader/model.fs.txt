#version 330 core
out vec4 FragColor;

struct Material{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	vec3 emissive;
	float shininess;

	sampler2D texture_diffuse1;
	sampler2D texture_specular1;
	
	int text;
};

struct PointLight
{
	vec3 position;

	float constant;
	float linear;
	float quadratic;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	samplerCube shadowCubeMap;
};

#define NR_POINT_LIGHTS 40

in vec2 TexCoords;
in vec3 Normal;
in vec3 FragPos;

uniform Material material;
uniform PointLight pointLights[NR_POINT_LIGHTS];
uniform vec3 viewPos;
uniform float num;

uniform float far_plane;
uniform bool shadows;

vec3 CalcPointLight(PointLight light,vec3 normal,vec3 fragPos,vec3 viewDir,int n);

float ShadowCalculation(vec3 fragPos,float bias,int n);

void main()
{   
	vec3 norm = normalize(Normal);
	vec3 viewDir = normalize(viewPos-FragPos);
	vec3 result = vec3(0.0f,0.0f,0.0f);
	//result += CalcPointLight(pointLights[0],norm,FragPos,viewDir,0);
	//result += CalcPointLight(pointLights[2],norm,FragPos,viewDir,2);
	//result += CalcPointLight(pointLights[4],norm,FragPos,viewDir,4);
	//result += CalcPointLight(pointLights[6],norm,FragPos,viewDir,6);
	result += CalcPointLight(pointLights[8],norm,FragPos,viewDir,8);
	result += CalcPointLight(pointLights[10],norm,FragPos,viewDir,10);
	//result += CalcPointLight(pointLights[12],norm,FragPos,viewDir,12);
	//result += CalcPointLight(pointLights[14],norm,FragPos,viewDir,14);
	//result += CalcPointLight(pointLights[16],norm,FragPos,viewDir,16);
	//result += CalcPointLight(pointLights[18],norm,FragPos,viewDir,18);
	//result += CalcPointLight(pointLights[20],norm,FragPos,viewDir,20);
	//result += CalcPointLight(pointLights[22],norm,FragPos,viewDir,22);
	//result += CalcPointLight(pointLights[25],norm,FragPos,viewDir,25);
	//result += CalcPointLight(pointLights[26],norm,FragPos,viewDir,26);	
    	FragColor = vec4(result,1.0f);
    
}

vec3 CalcPointLight(PointLight light,vec3 normal, vec3 fragPos, vec3 viewDir,int n)
{
	vec3 lightDir = normalize(light.position-fragPos);

	float diff = max(dot(lightDir,normal),0.0f);

	vec3 reflectDir = reflect(-lightDir,normal);
	float spec = pow(max(dot(viewDir,reflectDir),0.0f),material.shininess);

	float distance = length(light.position-fragPos);
	float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance)); 
	
	//attenuation *= 0.1;

	vec3 ambient=vec3(0,0,0);
	vec3 diffuse=vec3(0,0,0);
	vec3 specular=vec3(0,0,0);
	
	if(material.text==1)
	{
		ambient = light.ambient * vec3(texture(material.texture_diffuse1, TexCoords));
		diffuse = light.diffuse * diff * vec3(texture(material.texture_diffuse1, TexCoords));
		specular = light.specular * spec * vec3(texture(material.texture_specular1, TexCoords));

		ambient *= attenuation;
    		diffuse *= attenuation;
    		specular *= attenuation;

	}
	else
	{
		ambient = light.ambient * material.diffuse;
		diffuse = light.diffuse * diff * material.diffuse;
		specular = light.specular * spec * material.diffuse;

		ambient *= attenuation;
    		diffuse *= attenuation;
    		specular *= attenuation;
		
	}
	float bias = max(0.005 * (1.0 - dot(normal, lightDir)), 0.0005);
         float shadow = shadows ? ShadowCalculation(FragPos,bias,n) : 0.0;
	//float shadow = ShadowCalculation(FragPos,bias) ;       
	//vec3 lighting = (ambient + (1.0 - 0.0) *(diffuse /*+ specular*/));   
        vec3 lighting = (ambient + (1.0 - shadow) *(diffuse /*+ specular*/));  

	return lighting;
}

float ShadowCalculation(vec3 fragPos,float bias,int n)
{
  
    	vec3 fragToLight = fragPos - pointLights[n].position;
 
    	float closestDepth = texture(pointLights[n].shadowCubeMap, fragToLight).r;
	 // float closestDepth = 0.2f;
    
    	closestDepth *= far_plane;

	float currentDepth = length(fragToLight);
    
    	float shadow = currentDepth-bias > closestDepth ? 1.0 : 0.0;
	//shadow -= closestDepth;
	//shadow /= far_plane;


    	return shadow;
}
